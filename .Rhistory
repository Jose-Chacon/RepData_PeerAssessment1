weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1))
plot(weekend, type = "l")
plot(weekday, type = "l")
weekday <- subset (df1, weekdays == "weekday")
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend")
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1))
plot(weekend, type = "l")
plot(weekday, type = "l")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
plot(weekend, type = "l")
plot(weekday, type = "l")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l")
plot(weekday, type = "l")
par(mfrow = c(2, 1), mar = c(0, 0, 2, 1))
plot(weekend, type = "l")
plot(weekday, type = "l")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend")
plot(weekday, type = "l", main = "weekday")
plot(weekend, type = "l", main = "weekend", breaks = "FD")
plot(weekday, type = "l", main = "weekday", breaks = "FD")
plot(weekend, type = "l", main = "weekend", col = "blue")
plot(weekday, type = "l", main = "weekday", col = "blue")
par(mfrow = c(2, 1), mar = c(-1, 4, 2, 1))
plot(weekend, type = "l", main = "weekend")
plot(weekday, type = "l", main = "weekday")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend")
plot(weekday, type = "l", main = "weekday")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "70")
plot(weekday, type = "l", main = "weekday")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "80")
plot(weekday, type = "l", main = "weekday", col = "110")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "637")
plot(weekday, type = "l", main = "weekday", col = "429")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "skyblue")
plot(weekday, type = "l", main = "weekday", col = "429")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "lightskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "lightskyblue", col.main ="orangered"    )
plot(weekday, type = "l", main = "weekday", col = "deepskyblue", col.main = "orangered1"   )
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "lightskyblue", fg ="orangered"    )
plot(weekday, type = "l", main = "weekday", col = "deepskyblue",fg = "orangered1"   )
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend", col = "lightskyblue", fg ="orangered" ,outer = TRUE   )
plot(weekday, type = "l", main = "weekday", col = "deepskyblue",fg = "orangered1"   )
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue", xlab ="")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue", xlab =" ")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
# Load data from csv file keeping headers
df <- read.csv("./activity.csv", header = TRUE, stringsAsFactors = FALSE)
# Transform text date into Date type class
df$date <- as.Date(df$date)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total number of steps taken per day
# If you do not understand the difference between a histogram and a barplot,
# research the difference between them.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median of the total number of steps taken per day
# Total steps per day ommiting missing values
tot.steps.day <- aggregate(steps  ~ date, data = df, FUN = "sum")
hist(tot.steps.day$steps, main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean total number of steps
steps.daily.mean <- mean(tot.steps.day$steps)
# Median total numbre of steps
steps.daily.median <- median(tot.steps.day$steps)
# What is the average daily activity pattern?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Average steps per interval
steps.interval.average <- aggregate(steps  ~ interval, data = df, FUN = "sum")
# Plot intervals and average steps
plot(steps.interval.average$steps,steps.interval.average$inteval, type = "l")
# Maximun number of steps
steps.interval.average[which.max( steps.interval.average[,2] ),]
# Imputing missing values
# Note that there are a number of days/intervals where there are missing values (coded as NA).
# The presence of missing days may introduce bias into some calculations or summaries of the data.
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median
# total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Missing values quantity
length(which(is.na(df)))
# Fill missing values with mean from all observations
df1 <- df
df1[which(is.na(df1)),1] <- steps.daily.mean
# Plot histogram by daily total steps
hist(df1[,1], main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean from data with replaced missing values
steps.daily.nona.mean <- mean(df1$steps)
# Median from data with replaced missing values
steps.daily.nona.median <- median(df1$steps)
# Are there differences in activity patterns between weekdays and weekends?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
# See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
# Indentify weekdays and weekends
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
df1$weekdays <- c('weekend', 'weekday')[(weekdays(steps.daily.nona$date) %in% weekdays1)+1L]
# Observations during weekdays
weekday <- subset (df1, weekdays == "weekday")
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend")
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
df <- read.csv("./activity.csv", header = TRUE, stringsAsFactors = FALSE)
# Transform text date into Date type class
df$date <- as.Date(df$date)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total number of steps taken per day
# If you do not understand the difference between a histogram and a barplot,
# research the difference between them.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median of the total number of steps taken per day
# Total steps per day ommiting missing values
tot.steps.day <- aggregate(steps  ~ date, data = df, FUN = "sum")
hist(tot.steps.day$steps, main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean total number of steps
steps.daily.mean <- mean(tot.steps.day$steps)
# Median total numbre of steps
steps.daily.median <- median(tot.steps.day$steps)
# What is the average daily activity pattern?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Average steps per interval
steps.interval.average <- aggregate(steps  ~ interval, data = df, FUN = "sum")
# Plot intervals and average steps
plot(steps.interval.average$steps,steps.interval.average$inteval, type = "l")
# Maximun number of steps
steps.interval.average[which.max( steps.interval.average[,2] ),]
# Imputing missing values
# Note that there are a number of days/intervals where there are missing values (coded as NA).
# The presence of missing days may introduce bias into some calculations or summaries of the data.
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median
# total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Missing values quantity
length(which(is.na(df)))
# Fill missing values with mean from all observations
df1 <- df
df1[which(is.na(df1)),1] <- steps.daily.mean
# Plot histogram by daily total steps
hist(df1[,1], main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean from data with replaced missing values
steps.daily.nona.mean <- mean(df1$steps)
# Median from data with replaced missing values
steps.daily.nona.median <- median(df1$steps)
# Are there differences in activity patterns between weekdays and weekends?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
# See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
# Indentify weekdays and weekends
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
df1$weekdays <- c('weekend', 'weekday')[(weekdays(df1$date) %in% weekdays1)+1L]
# Observations during weekdays
weekday <- subset (df1, weekdays == "weekday")
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend")
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
View(weekdays)
df <- read.csv("./activity.csv", header = TRUE, stringsAsFactors = FALSE)
# Transform text date into Date type class
df$date <- as.Date(df$date)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total number of steps taken per day
# If you do not understand the difference between a histogram and a barplot,
# research the difference between them.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median of the total number of steps taken per day
# Total steps per day ommiting missing values
tot.steps.day <- aggregate(steps  ~ date, data = df, FUN = "sum")
hist(tot.steps.day$steps, main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean total number of steps
steps.daily.mean <- mean(tot.steps.day$steps)
# Median total numbre of steps
steps.daily.median <- median(tot.steps.day$steps)
# What is the average daily activity pattern?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Average steps per interval
steps.interval.average <- aggregate(steps  ~ interval, data = df, FUN = "sum")
# Plot intervals and average steps
plot(steps.interval.average$steps,steps.interval.average$inteval, type = "l")
# Maximun number of steps
steps.interval.average[which.max( steps.interval.average[,2] ),]
# Imputing missing values
# Note that there are a number of days/intervals where there are missing values (coded as NA).
# The presence of missing days may introduce bias into some calculations or summaries of the data.
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median
# total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Missing values quantity
length(which(is.na(df)))
# Fill missing values with mean from all observations
df1 <- df
df1[which(is.na(df1)),1] <- steps.daily.mean
# Plot histogram by daily total steps
hist(df1[,1], main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean from data with replaced missing values
steps.daily.nona.mean <- mean(df1$steps)
# Median from data with replaced missing values
steps.daily.nona.median <- median(df1$steps)
# Are there differences in activity patterns between weekdays and weekends?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
# See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
# Indentify weekdays and weekends
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
df1$weekdays <- c('weekend', 'weekday')[(weekdays(df1$date) %in% weekdays1)+1L]
# Observations during weekdays
weekday <- subset (df1, weekdays == "weekday" & steps != 0)
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend" & steps != 0)
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
weekday <- subset (df1, weekdays == "weekday" & steps != 0)
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend" & steps != 0)
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ date, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ date, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
df <- read.csv("./activity.csv", header = TRUE, stringsAsFactors = FALSE)
# Transform text date into Date type class
df$date <- as.Date(df$date)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total number of steps taken per day
# If you do not understand the difference between a histogram and a barplot,
# research the difference between them.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median of the total number of steps taken per day
# Total steps per day ommiting missing values
tot.steps.day <- aggregate(steps  ~ date, data = df, FUN = "sum")
hist(tot.steps.day$steps, main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean total number of steps
steps.daily.mean <- mean(tot.steps.day$steps)
# Median total numbre of steps
steps.daily.median <- median(tot.steps.day$steps)
# What is the average daily activity pattern?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Average steps per interval
steps.interval.average <- aggregate(steps  ~ interval, data = df, FUN = "sum")
# Plot intervals and average steps
plot(steps.interval.average$steps,steps.interval.average$inteval, type = "l")
# Maximun number of steps
steps.interval.average[which.max( steps.interval.average[,2] ),]
# Imputing missing values
# Note that there are a number of days/intervals where there are missing values (coded as NA).
# The presence of missing days may introduce bias into some calculations or summaries of the data.
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median
# total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Missing values quantity
length(which(is.na(df)))
# Fill missing values with mean from all observations
df1 <- df
df1[which(is.na(df1)),1] <- steps.daily.mean
# Plot histogram by daily total steps
hist(df1[,1], main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean from data with replaced missing values
steps.daily.nona.mean <- mean(df1$steps)
# Median from data with replaced missing values
steps.daily.nona.median <- median(df1$steps)
# Are there differences in activity patterns between weekdays and weekends?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
# See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
# Indentify weekdays and weekends
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
df1$weekdays <- c('weekend', 'weekday')[(weekdays(df1$date) %in% weekdays1)+1L]
# Observations during weekdays
weekday <- subset (df1, weekdays == "weekday" )
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend" )
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
plot(df)
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "gray")
points(df)
Project1()
Project1 <- function{
# Loading and preprocessing the data
# Show any code that is needed to
# Load the data (i.e. read.csv())
# Process/transform the data (if necessary) into a format suitable for your analysis
# Load data from csv file keeping headers
df <- read.csv("./activity.csv", header = TRUE, stringsAsFactors = FALSE)
# Transform text date into Date type class
df$date <- as.Date(df$date)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total number of steps taken per day
# If you do not understand the difference between a histogram and a barplot,
# research the difference between them.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median of the total number of steps taken per day
# Total steps per day ommiting missing values
tot.steps.day <- aggregate(steps  ~ date, data = df, FUN = "sum")
hist(tot.steps.day$steps, main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean total number of steps
steps.daily.mean <- mean(tot.steps.day$steps)
# Median total numbre of steps
steps.daily.median <- median(tot.steps.day$steps)
# What is the average daily activity pattern?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Average steps per interval
steps.interval.average <- aggregate(steps  ~ interval, data = df, FUN = "sum")
# Plot intervals and average steps
plot(steps.interval.average$steps,steps.interval.average$inteval, type = "l")
# Maximun number of steps
steps.interval.average[which.max( steps.interval.average[,2] ),]
# Imputing missing values
# Note that there are a number of days/intervals where there are missing values (coded as NA).
# The presence of missing days may introduce bias into some calculations or summaries of the data.
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median
# total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Missing values quantity
length(which(is.na(df)))
# Fill missing values with mean from all observations
df1 <- df
df1[which(is.na(df1)),1] <- steps.daily.mean
# Plot histogram by daily total steps
hist(df1[,1], main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean from data with replaced missing values
steps.daily.nona.mean <- mean(df1$steps)
# Median from data with replaced missing values
steps.daily.nona.median <- median(df1$steps)
# Are there differences in activity patterns between weekdays and weekends?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
# See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
# Indentify weekdays and weekends
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
df1$weekdays <- c('weekend', 'weekday')[(weekdays(df1$date) %in% weekdays1)+1L]
# Observations during weekdays
weekday <- subset (df1, weekdays == "weekday" )
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend" )
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
}
Project1 <- function{
# Loading and preprocessing the data
# Show any code that is needed to
# Load the data (i.e. read.csv())
# Process/transform the data (if necessary) into a format suitable for your analysis
# Load data from csv file keeping headers
df <- read.csv("./activity.csv", header = TRUE, stringsAsFactors = FALSE)
# Transform text date into Date type class
df$date <- as.Date(df$date)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# Calculate the total number of steps taken per day
# If you do not understand the difference between a histogram and a barplot,
# research the difference between them.
# Make a histogram of the total number of steps taken each day
# Calculate and report the mean and median of the total number of steps taken per day
# Total steps per day ommiting missing values
tot.steps.day <- aggregate(steps  ~ date, data = df, FUN = "sum")
hist(tot.steps.day$steps, main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean total number of steps
steps.daily.mean <- mean(tot.steps.day$steps)
# Median total numbre of steps
steps.daily.median <- median(tot.steps.day$steps)
# What is the average daily activity pattern?
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
# averaged across all days (y-axis)
# Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Average steps per interval
steps.interval.average <- aggregate(steps  ~ interval, data = df, FUN = "sum")
# Plot intervals and average steps
plot(steps.interval.average$steps,steps.interval.average$inteval, type = "l")
# Maximun number of steps
steps.interval.average[which.max( steps.interval.average[,2] ),]
# Imputing missing values
# Note that there are a number of days/intervals where there are missing values (coded as NA).
# The presence of missing days may introduce bias into some calculations or summaries of the data.
# Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
# Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
# For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
# Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median
# total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment?
# What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Missing values quantity
length(which(is.na(df)))
# Fill missing values with mean from all observations
df1 <- df
df1[which(is.na(df1)),1] <- steps.daily.mean
# Plot histogram by daily total steps
hist(df1[,1], main = "Total steps per day", xlab = "Steps", ylab = "Frequency")
# Mean from data with replaced missing values
steps.daily.nona.mean <- mean(df1$steps)
# Median from data with replaced missing values
steps.daily.nona.median <- median(df1$steps)
# Are there differences in activity patterns between weekdays and weekends?
# For this part the weekdays() function may be of some help here. Use the dataset with
# the filled-in missing values for this part.
# Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
# indicating whether a given date is a weekday or weekend day.
# Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
# and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
# See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
# Indentify weekdays and weekends
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
df1$weekdays <- c('weekend', 'weekday')[(weekdays(df1$date) %in% weekdays1)+1L]
# Observations during weekdays
weekday <- subset (df1, weekdays == "weekday" )
# Observations during weekends
weekend <- subset (df1, weekdays == "weekend" )
# Plot by intervals, average steps by weekday
weekday <- aggregate(steps  ~ interval, data = weekday, FUN = "mean")
weekend <- aggregate(steps  ~ interval, data = weekend, FUN = "mean")
par(mfrow = c(2, 1), mar = c(0, 4, 2, 1))
plot(weekend, type = "l", main = "weekend" ,col = "deepskyblue")
plot(weekday, type = "l", main = "weekday", col = "deepskyblue")
}
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
